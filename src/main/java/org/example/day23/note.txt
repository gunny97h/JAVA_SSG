1. 변수
    ● 기본형 [원시형 / 정수, 실수, 문자1, 논리]
        정수 [byte, short, int:4byte, long]
        실수 [float:4byte, double:8byte]
        문자 [char:2byte]
        논리 [1byte]
    ● 참조형 [배열, 객체, ... ]
        값은 다른 곳에 저장하고 그 주소를 참조
    ● 초기화
            int i = 0;
            float f = 0.0f;
            String s = null;
            int[] n = null;
    ● 변수 구분
        기준1) 범위
                클래스 아래 선언 --> 전역변수
                클래스 안쪽 메서드/제어문 선언 --> 지역변수
        기준2) 자동초기화
                전역변수 --> 자동초기화 o
                지역변수 --> 자동초기화 x
        기준3) 객체생성
                인스턴스변수 --> 객체생성후
                스태틱(정적)변수 --> 객체생성 상관x
        기준4) 저장
                기본형 --> 값
                참조형 --> 주소
        기준5) 저장값/주소 변경 여부
                변수 --> 변경 가능
                상수 --> 변경 불가능

2. 연산자
    ● 단항연산자
      -증감 [ ++, -- ]
    ● 이항연산자
      - 산술 [ +,-,*,/,% ]
      - 비교 [ ==, !=, >, <, >=, <= ]
      - 논리 [ !, &&, || ]
    ● 삼항연산자
      - 조건 ? true인 경우 : false인 경우


3. 제어문
    ● 순차문
    ● 반복문 [while(조건), for(조건)]
    ● 조건문 [if(조건), switch(변수 - 기본형 중 실수형만 제외하고 사용 가능)]

4. 배열
    int[] n = new int[5];
    만들어진 변수의 총 개수: 7개 (5개의 0, length, 주소 n)

--------------
5. 객체/클래스
    A.java(public class A) --> javac A.java --> A.class --> JVM(java A) --> 기계어

6. 상속
    ● public class Truck(자식, 하위, 서브클래스) extends Car(부모, 상위, 수퍼클래스)
    ● Car c = new Truck(); // 큰 <-- (자동형변환, 업캐스팅) -- 작
      Truck t = (Truck)new Car(); // 작 <-- (강제형변환, 다운캐스팅) -- 큰
    ● Object - 최상위 클래스, 가장 큰, toString(), equals(), hashCode()
    ● 생성자 - 필드값 초기화 목적, 오버로딩
            - 생성자가 하나도 없는 경우 --> 기본생성자가 만들어진다.
            - 생성자를 하나 넣으면 자동생성되지 않음.
            - 생성자 메서드 - 리턴 x, 클래스명과 동일한 이름


7. 형변환/제너릭
    ● 제너릭
        - 형변환 x, 객체 생성시 타입을 지정할 수 있는 문법
        - ArrayList<String>, ArrayList<Integer>
        - ArrayList<String> list = new ArrayList()<>;
        - ArrayList<int> --> X, 기본형 사용 불가
    ● 컬렉션
        - 순서 (List)
        - 중복X (Set)
        - 키/값 (Map)
        - 선입선출 (Queue)
    ● 스레드
        - 만드는 방법 : 상속, 인터페이스 구현
        - start() : 스레드 실행 시작
        - run() : 동시에 처리될 내용을 코딩
        - 멀티스레드 : 여러 스레드 동시에 실행

8. 인터페이스/추상클래스
    ● 인터페이스 - 추상메서드만(불완전한 메서드, 구현이 빠져있는 메서드), 상수
    ● 추상클래스 - 일반메서드 + 추상메서드 1개 이상, 변수 + 상수
    ● 공통점 : 추상메서드 가짐, 객체생성 x, 일반클래스로 구현해서 사용해야 함.

9. 스트림(외부 자원과 연결한 통로)
    ● InputStream, OutputStream - 1byte 처리, 모든 타입 다
    ● Reader, Writer - 2byte 처리, 문자 타입 처리만

10. IntStream, DoubleStream, Stream<String>
    ● 메서드 - stream(), filter(), map(), distinct(), ...

11. 람다식
    ● 화살표(->) 문법 - 조건(함수형 인터페이스인 경우에만, 추상메서드를 하나만 가지는)
    (파라미터) -> {처리내용} - 처리 내용이 1줄이면 생략 가능, return도 생략 가능

12. 객체지향 2대 원칙
    ● 응집도 - 클래스에는 하나의 역할만 정의, 높아야 좋음.
    ● 결합도 - 다른 부품 사이의 결합도가 낮아야 다른 부품으로 교체하기 수월함.

13. final
    ● final 변수 --> 상수
    ● final 클래스 --> 상속 불가능

14. try(예외가 발생할 것 같은 코드)~catch(여러개, 예외처리코드)
     finally(예외상황과 상관없이 항상 실행하는 코드)

15. 주석 //, /* ~ */

 6. 다음 중 인터페이스에 대한 설명으로 틀린 것은 무엇인가? (정답: 1)
정답	1) 인터페이스로 인스턴스를 생성할 수 있다.
2) 인터페이스는 메서드 중에서는 추상메서드만 들어가는 것이 일반적이다.
3) 인터페이스에는 변수는 불가능하고 상수만 가능하다.
4) 인터페이스를 구현한 것이 클래스이다.

 18. 문자 데이터를 출력하기 위한 클래스로 가장 적당한 것은 무엇인가? (정답: 2)
1) InputStream
정답	2) Writer
3) OutputStream
4) ObjectOutputStream