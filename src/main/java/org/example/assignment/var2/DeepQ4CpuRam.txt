자바를 비롯한 대부분의 프로그래밍 언어에서, 프로그램이 실행될 때 사용하는 메모리 구조는 크게 두 가지 영역으로 나뉩니다: 스택(Stack)과 힙(Heap)입니다. 이 두 영역은 CPU와 RAM의 상호작용을 통해 프로그램의 실행을 지원하며, 각각의 영역은 고유의 역할과 특징을 가지고 있습니다. 이를 흔히 "T자형 메모리 구조"라고 설명할 수 있습니다.

### 스택(Stack) 영역

스택은 메모리의 한 부분으로, 주로 함수 호출과 지역 변수의 저장에 사용됩니다. 스택은 LIFO(Last In, First Out) 구조로 동작하며, 함수 호출이 발생할 때마다 새로운 스택 프레임이 생성되고 함수가 종료되면 해당 스택 프레임이 제거됩니다.

- **특징**:
  - **자동 관리**: 함수가 호출될 때 자동으로 할당되고, 함수가 종료될 때 자동으로 해제됩니다.
  - **빠른 접근 속도**: 스택은 CPU 레지스터와 가까운 위치에 있어서 접근 속도가 매우 빠릅니다.
  - **제한된 크기**: 스택의 크기는 제한되어 있어, 너무 큰 데이터를 저장하거나 재귀 호출이 너무 깊어지면 스택 오버플로우가 발생할 수 있습니다.
  - **데이터 종류**: 주로 기본형 데이터 타입(int, float, char 등)과 객체의 참조 변수 등이 저장됩니다.

### 힙(Heap) 영역

힙은 동적으로 메모리를 할당할 수 있는 메모리 영역으로, 객체와 배열과 같은 동적 데이터가 저장됩니다. 힙은 스택과 달리 개발자가 직접 메모리를 관리해야 하며, 가비지 컬렉터(Garbage Collector)를 통해 더 이상 사용되지 않는 메모리를 자동으로 회수합니다.

- **특징**:
  - **동적 할당**: 실행 시간에 메모리를 동적으로 할당할 수 있습니다.
  - **크기 제한이 적음**: 스택에 비해 상대적으로 큰 데이터를 저장할 수 있습니다.
  - **느린 접근 속도**: 스택에 비해 접근 속도가 느립니다. 이는 힙이 CPU 캐시와의 거리가 더 멀기 때문입니다.
  - **데이터 종류**: 주로 객체와 배열과 같은 동적 데이터가 저장됩니다.

### T자형 메모리 구조

T자형 메모리 구조는 스택과 힙이 서로 독립적인 영역으로 존재하며, 이 두 영역이 T자 모양으로 배치된 것처럼 메모리를 사용한다고 해서 붙여진 이름입니다. 스택은 위에서 아래로, 힙은 아래에서 위로 메모리를 사용하며, 이 두 영역 사이에 여유 공간이 존재합니다.

```
+-------------------+
|       Stack       |  <--- 위에서 아래로 메모리 할당
|-------------------|
|                   |
|       Free        |
|       Space       |
|                   |
|-------------------|
|       Heap        |  <--- 아래에서 위로 메모리 할당
+-------------------+
```

### 예제 코드와 메모리 구조 설명

```java
public class MemoryStructureExample {
    public static void main(String[] args) {
        int a = 10; // 스택에 저장
        int b = 20; // 스택에 저장

        MyObject obj = new MyObject(); // 힙에 객체 할당, obj는 스택에 참조 변수 저장

        obj.value = a + b; // obj의 필드 값 변경 (힙에 저장된 객체의 필드)

        System.out.println("Sum: " + obj.value);
    }
}

class MyObject {
    int value; // 힙에 저장
}
```

1. **`int a = 10;`**: 기본형 변수 `a`가 스택에 저장됩니다.
2. **`int b = 20;`**: 기본형 변수 `b`가 스택에 저장됩니다.
3. **`MyObject obj = new MyObject();`**: 새로운 `MyObject` 객체가 힙에 할당되고, 참조 변수 `obj`는 스택에 저장됩니다.
4. **`obj.value = a + b;`**: `obj`가 참조하는 힙의 객체의 `value` 필드가 수정됩니다.
5. **`System.out.println("Sum: " + obj.value);`**: `obj.value`의 값을 출력합니다.

이 예제에서, 기본형 변수 `a`와 `b`는 스택에 저장되고, 객체 `MyObject`는 힙에 저장됩니다. 힙에 있는 객체는 스택에 있는 참조 변수 `obj`를 통해 접근됩니다.

