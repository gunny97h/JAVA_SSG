이 그림은 객체지향 프로그래밍(OOP)의 상속 관계를 설명하고 있습니다. 상위 클래스와 하위 클래스 간의 관계를 보여주는 다이어그램입니다.

### 그림 설명

1. **상위 클래스(Parent Class/Super Class)**
   - **직원(Staff) 클래스**: 이 클래스는 상위 클래스 또는 부모 클래스입니다.
   - 클래스의 멤버 변수:
     - `+name: String`
     - `address: String`
     - `#salary: int`
     - `-rrn: int`
   - 클래스의 메서드:
     - `+toString(): String`
   - 접근 제어자는 `+`는 public, `#`는 protected, `-`는 private를 나타냅니다.

2. **하위 클래스(Child Class/Sub Class)**
   - **매니저(Manager) 클래스**: 이 클래스는 하위 클래스 또는 자식 클래스입니다. 직원 클래스를 상속받습니다.
   - 클래스의 멤버 변수:
     - `-bonus: int`
   - 클래스의 메서드:
     - `+test(): void`
   - 접근 제어자는 `+`는 public, `-`는 private를 나타냅니다.

3. **이미지 설명**
   - **왼쪽 상단 이미지**: 여러 명의 직원들이 회의 중인 모습을 보여줍니다. 이는 상위 클래스인 '직원' 클래스를 나타냅니다.
   - **오른쪽 하단 이미지**: 한 명의 여성이 문서를 작성하는 모습을 보여줍니다. 이는 하위 클래스인 '매니저' 클래스를 나타냅니다.

### 상속 관계

- 상속(inheritance)은 객체지향 프로그래밍의 중요한 개념 중 하나입니다.
  하위 클래스는 상위 클래스의 특성과 행동을 상속받아 사용할 수 있으며,
  하위 클래스는 상위 클래스의 특성과 행동을 확장하거나 변경할 수 있습니다.

- 이 다이어그램에서는 '매니저' 클래스가 '직원' 클래스를 상속받았음을 보여줍니다.
  '매니저' 클래스는 '직원' 클래스의 속성과 메서드를 상속받아 사용할 수 있으며,
  추가적으로 `bonus`라는 속성과 `test()`라는 메서드를 가지고 있습니다.

### 접근 제어자

- **Public (+)**: 모든 클래스에서 접근 가능.
- **Protected (#)**: 동일 패키지의 클래스와 상속받은 하위 클래스에서 접근 가능.
- **Private (-)**: 동일 클래스 내에서만 접근 가능.

